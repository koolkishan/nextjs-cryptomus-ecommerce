// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       String    @id @default(cuid())
    name     String?
    email    String?   @unique
    image    String?
    role     UserRole  @default(USER)
    profile  Profile[]
    wishlist Wishlist?
    cart     Cart?
    order    Order[]

    @@map("users")
}

model admin_user {
    id        String   @id @default(cuid())
    firstName String
    lastName  String
    email     String   @unique()
    password  String
    status    Boolean
    roles     String[]
}

enum UserRole {
    ADMIN
    USER
}

model Products {
    id          String         @id @default(cuid())
    productName String
    price       Float
    discount    Float
    description String
    images      String[]
    tags        String[]
    category    Categories     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId  String
    quantity    Int
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
    wishlist    Wishlist[] // One-to-many relationship with Wishlist
    carts       CartProduct[] // One-to-many relationship with CartProduct
    order       OrderProduct[]
}

model Categories {
    id           String     @id @default(cuid())
    categoryName String     @unique
    products     Products[] // One-to-many relationship with Products
}

model Profile {
    id        String   @id @default(cuid())
    userId    String   @unique
    addresses String[]
    mobileNo  String?
    user      User     @relation(fields: [userId], references: [id])
}

model Wishlist {
    id        String     @id @default(cuid())
    user      User       @relation(fields: [userId], references: [id])
    userId    String     @unique
    products  Products[] // Many-to-many relationship with Products
    createdAt DateTime   @default(now())
}

model Cart {
    id        String        @id @default(cuid())
    user      User          @relation(fields: [userId], references: [id])
    userId    String        @unique
    products  CartProduct[]
    createdAt DateTime      @default(now())
}

model CartProduct {
    id        String   @id @default(cuid())
    cart      Cart     @relation(fields: [cartId], references: [id])
    cartId    String
    product   Products @relation(fields: [productId], references: [id])
    productId String
    quantity  Int
}

model Order {
    id            String         @id @default(cuid())
    user          User           @relation(fields: [userId], references: [id])
    userId        String
    products      OrderProduct[]
    createdAt     DateTime       @default(now())
    totalPrice    Float
    totalDiscount Float
    status        String
}

model OrderProduct {
    id        String   @id @default(cuid())
    order     Order    @relation(fields: [orderId], references: [id])
    orderId   String
    product   Products @relation(fields: [productId], references: [id])
    productId String
    quantity  Int
}
